import os
import sys
import re

sys.path.insert(0, '../libs')
from libs import cmd_run

from ci import Base, Verdict, EndTest, submit_pw_check

class TestRunner(Base):
    """Test Runner class
    This class runs the test-runner with the test targer
    """
    def __init__(self, ci_data, test_name, bluez_src_dir):

        # Common
        self.name = f"TestRunner_{test_name}"
        self.desc = f"Run {test_name} with test-runner"
        self.ci_data = ci_data
        self.bluez_src_dir = bluez_src_dir

        self.test_name = test_name
        self.test_runner = os.path.join(bluez_src_dir, "tools/test-runner")
        self.test_img = os.path.join(self.ci_data.src_dir, "arch/x86/boot/bzImage")
        self.test_summary = None

        super().__init__()

        self.log_dbg("Initialization completed")

    def parse_result(self, results):
        """
        Parse the result line generated by the tester and returns the dict
        with total, passed, failed, not run, otherwise None.
        """

        regex = r"^Total:\s+(?P<total>\d+)\,\s+Passed:\s+(?P<passed>\d+)\s+\(.+\%\)\,\s+Failed:\s+(?P<failed>\d+)\,\s+Not\s+Run:\s+(?P<notrun>\d+)"
        matches = re.search(regex, results)
        if not matches:
            self.log_err("Unable to parse the result line: {results}")
            return None

        self.log_dbg(f"Result: {matches.groupdict().items()}")
        return matches.groupdict()

    def run(self):
        self.log_dbg("Run")

        self.start_timer()

        tester_path = os.path.join(self.bluez_src_dir, "tools", self.test_name)
        if not os.path.exists(tester_path):
            self.log_err(f"No tester found: {tester_path}")
            submit_pw_check(self.ci_data.pw, self.ci_data.patch_1,
                            self.name, Verdict.FAIL,
                            "No tester found",
                            None, self.ci_data.config['dry_run'])
            self.add_failure_end_test("No tester found")

        # Running tester
        cmd = [self.test_runner, "-k", self.test_img, "--", tester_path]
        (ret, stdout, stderr) = cmd_run(cmd, cwd=self.bluez_src_dir)
        if ret:
            self.log_err("Test failed to run")
            submit_pw_check(self.ci_data.pw, self.ci_data.patch_1,
                            self.name, Verdict.FAIL,
                            stderr,
                            None, self.ci_data.config['dry_run'])
            self.add_failure_end_test(stderr)

        # Process the result
        stdout_clean = re.sub(r"\x1B\[\d?\;?\d+m", "", stdout)
        check_fail = False
        failed_tc = []

        # verdict result
        for line in stdout_clean.splitlines():
            if re.search(r"^Total: ", line):
                self.test_summary = line

                result = self.parse_result(line)
                if result["failed"] != "0":
                    self.log_dbg("Some test failed")
                    submit_pw_check(self.ci_data.pw, self.ci_data.patch_1,
                                    self.name, Verdict.FAIL,
                                    f"{self.name}: {line}",
                                    None, self.ci_data.config['dry_run'])
                    self.add_failure(line)

                    # Adding Failed test cases
                    if len(failed_tc):
                        self.add_failure("\nFailed Test Cases")
                        for tc in failed_tc:
                            self.add_failure(tc)

                    # No need to check failure
                    check_fail = False
                    raise EndTest

                submit_pw_check(self.ci_data.pw, self.ci_data.patch_1,
                                self.name, Verdict.PASS,
                                "TestRunner PASS",
                                None, self.ci_data.config['dry_run'])
                self.success()
                return

            if re.search(r"^Test Summary", line):
                self.log_dbg("Start to check fail in the line")
                check_fail = True

            if check_fail and re.search(r"Failed", line):
                self.log_dbg("Found a failed tc")
                failed_tc.append(line)

            if check_fail and re.search(r"Timed out", line):
                self.log_dbg("Found a failed tc: Timed out")
                failed_tc.append(line)

        self.add_failure_end_test("No test result found")

    def post_run(self):
        self.log_dbg("Post Run...")